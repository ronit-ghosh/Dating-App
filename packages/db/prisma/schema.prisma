generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(uuid())
  firstname        String
  lastname         String?
  email            String
  password         String
  dob              DateTime      @db.Date
  userDetails      UserDetails[]
  Prompts          Prompts[]
  Images           Images[]
  createdAt        DateTime      @default(now())
  upadatedAt       DateTime      @updatedAt
  /**
   * no location field here
   * user_location will be stored separately
   * via raw SQL (../src/PostGIS.ts)
   */
  matchesInitiated Match[]       @relation("UserAMatches")
  matchesReceived  Match[]       @relation("UserBMatches")
}

model Match {
  id          String   @id @default(cuid())
  userAId     String
  userBId     String
  active      Boolean  @default(true)
  chat        Boolean  @default(false)
  unMatchedBy String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  /**
   * UserA => Who matched the user
   * UserB => User who matched by UserA
   */
  userA       User     @relation("UserAMatches", fields: [userAId], references: [id])
  userB       User     @relation("UserBMatches", fields: [userBId], references: [id])

  @@unique([userAId, userBId])
}

model UserDetails {
  userId           String          @id
  gender           Gender
  datingGender     Gender
  sexuality        String?
  datingIntention  String?
  relationshipType String?
  work             String?
  jobTitle         String?
  college          String?
  highestDegree    String?
  drink            Boolean?
  tobacco          Boolean?
  weed             Boolean?
  drugs            Boolean?
  user             User            @relation(fields: [userId], references: [id])
  showOnProfile    ShowOnProfile[]
  createdAt        DateTime        @default(now())
  upadatedAt       DateTime        @updatedAt
}

model ShowOnProfile {
  userDetailsUserId String       @id
  gender            Boolean?     @default(true)
  datingGender      Boolean?     @default(true)
  sexuality         Boolean?     @default(true)
  datingIntention   Boolean?     @default(false)
  relationshipType  Boolean?     @default(false)
  work              Boolean?     @default(false)
  jobTitle          Boolean?     @default(false)
  college           Boolean?     @default(false)
  highestDegree     Boolean?     @default(false)
  drink             Boolean?     @default(false)
  tobacco           Boolean?     @default(false)
  weed              Boolean?     @default(false)
  drugs             Boolean?     @default(false)
  UserDetails       UserDetails? @relation(fields: [userDetailsUserId], references: [userId])
}

model Prompts {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  title      String
  desc       String
  createdAt  DateTime @default(now())
  upadatedAt DateTime @updatedAt
}

model Images {
  id         String   @id @default(uuid())
  userId     String
  imageUrl   String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  upadatedAt DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
}
